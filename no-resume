#!/bin/sh

set -e

. /scripts/asutils-init

asutils_init_init "" "exec sh"

mkdir -p /dev /proc /root /run /sys

echo "${0##*/}: mounting kernel file systems"
mount -t proc     none /proc
mount -t devtmpfs none /dev
# We don't need /dev/pts
mount -t tmpfs    none /run
mount -t sysfs    none /sys

mkdir /run/lock

INIT=/sbin/init
OPTION=ro

for TOKEN in $(cat /proc/cmdline); do
	case "$TOKEN" in
		root=*) ROOT_DEVICE="${TOKEN#root=}";;
		init=*) INIT="${TOKEN#init=}";;
		ro) OPTION=ro;;
		rw) OPTION=rw;;
	esac
done

echo "${0##*/}: starting udev"
udevd --daemon --resolve-names=never
udevadm trigger --action=add
udevadm settle || :

TYPE="$(blkid -o value -s TYPE "$ROOT_DEVICE" || :)"

if [ -z "$TYPE" ]; then
	printf "\\033[1;31m${0##*/}: root device $ROOT_DEVICE is bad, opening shell\\033[0m\\n"
	exec sh
fi

echo "${0##*/}: mounting real root"
mount -o "$OPTION" -t "$TYPE" "$ROOT_DEVICE" /root

echo "${0##*/}: stopping udev"

cd /proc

for I in *; do
	EXE="$(readlink "$I/exe" 2> /dev/null || :)"
	if [ "${EXE##*/}" = udevd ]; then
		# Errors must be ignored due to a race with udevd child processes naturally terminating
		kill "$I" 2> /dev/null || :
	fi
done

cd /

asutils_init_move

echo "${0##*/}: chaining to real root"
exec run-init /root "$INIT" "$@" < /root/dev/console > /root/dev/console 2>&1
